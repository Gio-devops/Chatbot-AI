name: Python Application CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: 2. Configurar ambiente Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 3. Instalar depend√™ncias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 4. An√°lise de c√≥digo com Ruff (Lint)
      run: |
        ruff check .

    - name: 5. Executar testes com Pytest
      run: |
        # Precisamos simular a API Key para os testes, mesmo que n√£o seja usada
        export GEMINI_API_KEY="fake-key-for-testing"
        pytest

    - name: 6. Simula√ß√£o de Build da imagem Docker
      run: |
        docker build . --tag pyunit-scribe:latest

    - name: 7. Simula√ß√£o de Deploy
      run: |
        echo "‚úÖ Pipeline conclu√≠do com sucesso!"
        echo "üöÄ Simulando o deploy da aplica√ß√£o..."
        # Em um cen√°rio real, aqui entrariam comandos para publicar 
        # a imagem Docker e atualizar o servi√ßo na nuvem (ex: AWS ECS, GCP Cloud Run)
        echo "üöÄ Deploy simulado finalizado."